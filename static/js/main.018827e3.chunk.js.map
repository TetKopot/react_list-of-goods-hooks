{"version":3,"sources":["App.tsx","index.tsx"],"names":["ColorModeContext","React","createContext","toggleColorMode","MyApp","theme","useTheme","colorMode","useContext","Box","sx","display","width","alignItems","justifyContent","bgcolor","color","borderRadius","p","palette","mode","IconButton","ml","onClick","ToggleColorMode","useState","setMode","useMemo","prevMode","createTheme","Provider","value","ThemeProvider","SortType","goodsFromServer","App","isReversed","setIsREversed","NONE","sortType","setSortType","goodsOnPage","goods","sort","first","second","ALPHABET","localeCompare","LENGTH","length","reverse","orderedGoods","isResetVisible","className","type","cn","element","map","good","ReactDOM","render","document","getElementById"],"mappings":"6UAUMA,EAAmBC,IAAMC,cAAc,CAAEC,gBAAiB,eAEhE,SAASC,IACP,IAAMC,EAAQC,cACRC,EAAYN,IAAMO,WAAWR,GAEnC,OACE,eAACS,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTC,MAAO,OACPC,WAAY,SACZC,eAAgB,SAChBC,QAAS,qBACTC,MAAO,eACPC,aAAc,EACdC,EAAG,GATP,UAYGb,EAAMc,QAAQC,KAZjB,OAcE,cAACC,EAAA,EAAD,CACEX,GAAI,CAAEY,GAAI,GACVC,QAAShB,EAAUJ,gBACnBa,MAAM,UAHR,SAK0B,SAAvBX,EAAMc,QAAQC,KACX,cAAC,IAAD,IAAsB,cAAC,IAAD,SAMnB,SAASI,IACtB,MAAwBvB,IAAMwB,SAA2B,SAAzD,mBAAOL,EAAP,KAAaM,EAAb,KACMnB,EAAYN,IAAM0B,SACtB,iBAAO,CACLxB,gBAAiB,WACfuB,GAAQ,SAACE,GAAD,MAA4B,UAAbA,EAAuB,OAAS,eAG3D,IAGIvB,EAAQJ,IAAM0B,SAAQ,kBAAME,YAAY,CAC5CV,QAAS,CACPC,YAGJ,CAACA,IAED,OACE,cAACpB,EAAiB8B,SAAlB,CAA2BC,MAAOxB,EAAlC,SACE,cAACyB,EAAA,EAAD,CAAe3B,MAAOA,EAAtB,SACE,cAACD,EAAD,QAMD,IAaF6B,EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,MAAoCV,oBAAS,GAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KACA,EAAgCZ,mBAASQ,EAASK,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAmBMC,EAhDR,SACEC,EACAN,EACAG,GAEA,IAAME,EAAW,YAAOC,GAmBxB,OAjBAD,EAAYE,MAAK,SAACC,EAAOC,GACvB,OAAQN,GACN,KAAKN,EAASa,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKZ,EAASe,OACZ,OAAOJ,EAAMK,OAASJ,EAAOI,OAE/B,QACE,OAAO,MAITb,GACFK,EAAYS,UAGPT,EAwBaU,CAAajB,EAAiBE,EAAYG,GAExDa,EAAiBhB,GAAcG,IAAaN,EAASK,KAE3D,OACE,sBAAKe,UAAU,kBAAf,UACE,cAAC7B,EAAD,IACA,sBAAK6B,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYhB,IAAaN,EAASa,WAEtCvB,QA/BqB,WAC3BiB,EAAYP,EAASa,WAwBjB,iCAWA,wBACEQ,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYhB,IAAaN,EAASe,SAEtCzB,QAtCmB,WACzBiB,EAAYP,EAASe,SA+BjB,4BAWA,wBACEM,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAanB,IAEjBb,QA7Cc,WACpBc,GAAc,SAAAmB,GAAO,OAAKA,MAsCtB,qBAWCJ,GACC,wBACEE,KAAK,SACLD,UAAU,4BACV9B,QAlDU,WAClBc,GAAc,GACdG,EAAYP,EAASK,OA6Cf,sBAWJ,6BACGG,EAAYgB,KAAI,SAAAC,GAAI,OACnB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC/LjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.018827e3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport IconButton from '@mui/material/IconButton';\nimport Box from '@mui/material/Box';\nimport { useTheme, ThemeProvider, createTheme } from '@mui/material/styles';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\n\nconst ColorModeContext = React.createContext({ toggleColorMode: () => {} });\n\nfunction MyApp() {\n  const theme = useTheme();\n  const colorMode = React.useContext(ColorModeContext);\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        width: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        bgcolor: 'background.default',\n        color: 'text.primary',\n        borderRadius: 1,\n        p: 3,\n      }}\n    >\n      {theme.palette.mode}\n      mode\n      <IconButton\n        sx={{ ml: 1 }}\n        onClick={colorMode.toggleColorMode}\n        color=\"inherit\"\n      >\n        {theme.palette.mode === 'dark'\n          ? <Brightness7Icon /> : <Brightness4Icon />}\n      </IconButton>\n    </Box>\n  );\n}\n\nexport default function ToggleColorMode() {\n  const [mode, setMode] = React.useState<'light' | 'dark'>('light');\n  const colorMode = React.useMemo(\n    () => ({\n      toggleColorMode: () => {\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n      },\n    }),\n    [],\n  );\n\n  const theme = React.useMemo(() => createTheme({\n    palette: {\n      mode,\n    },\n  }),\n  [mode]);\n\n  return (\n    <ColorModeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>\n        <MyApp />\n      </ThemeProvider>\n    </ColorModeContext.Provider>\n  );\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nfunction orderedGoods(\n  goods: string[],\n  isReversed: boolean,\n  sortType: SortType,\n) {\n  const goodsOnPage = [...goods];\n\n  goodsOnPage.sort((first, second) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return first.localeCompare(second);\n\n      case SortType.LENGTH:\n        return first.length - second.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    goodsOnPage.reverse();\n  }\n\n  return goodsOnPage;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsREversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const handleSortedAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleSortedLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleReverse = () => {\n    setIsREversed(element => !element);\n  };\n\n  const handleReset = () => {\n    setIsREversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const goodsOnPage = orderedGoods(goodsFromServer, isReversed, sortType);\n\n  const isResetVisible = isReversed || sortType !== SortType.NONE;\n\n  return (\n    <div className=\"section content\">\n      <ToggleColorMode />\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={handleSortedAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={handleSortedLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {isResetVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {goodsOnPage.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}